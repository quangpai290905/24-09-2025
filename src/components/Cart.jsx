// src/components/Cart.jsx
import { useDispatch, useSelector } from "react-redux"; 
//   import 2 hook c·ªßa react-redux:
// - useDispatch: g·ª≠i action l√™n Redux store
// - useSelector: ƒë·ªçc d·ªØ li·ªáu t·ª´ Redux store

import CartItem from "./CartItem"; 
//   Component con ƒë·ªÉ render t·ª´ng s·∫£n ph·∫©m trong gi·ªè

import { clearCart } from "../redux/cart/cartSlice"; 
//   Import action creator clearCart t·ª´ cartSlice ƒë·ªÉ x√≥a to√†n b·ªô gi·ªè h√†ng

export default function Cart() {
  const dispatch = useDispatch(); 
  //   L·∫•y h√†m dispatch ƒë·ªÉ g·ªçi action (gi·ªëng nh∆∞ store.dispatch)

  // L·∫•y danh s√°ch item trong gi·ªè
  const items = useSelector((state) => state.cart.items ?? []); 
  //   L·∫•y state.cart.items t·ª´ Redux store
  // N·∫øu items = null/undefined th√¨ g√°n m·∫∑c ƒë·ªãnh = []

  // T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const totalQty = items.reduce((sum, it) => sum + (it.qty || 0), 0);
  //   Duy·ªát qua t·ª´ng item, c·ªông d·ªìn s·ªë l∆∞·ª£ng (qty)
  // N·∫øu qty null/undefined th√¨ m·∫∑c ƒë·ªãnh = 0

  // T√≠nh t·ªïng s·ªë ti·ªÅn
  const totalPrice = items.reduce(
    (sum, it) => sum + (it.qty || 0) * (it.price || 0),
    0
  );
  //   Duy·ªát qua t·ª´ng item, t√≠nh (qty * price), c·ªông d·ªìn v√†o sum

  // Format s·ªë ti·ªÅn sang VND
  const formatVND = (value) =>
    Number(value || 0).toLocaleString("vi-VN", { maximumFractionDigits: 0 });
  //   H√†m chuy·ªÉn s·ªë th√†nh chu·ªói c√≥ ph√¢n c√°ch h√†ng ngh√¨n
  // V√≠ d·ª•: 1000000 -> "1.000.000"

  return (
    <aside className="sidebar"> 
      {/*   Th·∫ª aside hi·ªÉn th·ªã gi·ªè h√†ng, c√≥ class CSS "sidebar" */}

      <h2 className="section-title">Gi·ªè h√†ng</h2> 
      {/*   Ti√™u ƒë·ªÅ gi·ªè h√†ng */}

      {/* Danh s√°ch s·∫£n ph·∫©m trong gi·ªè */}
      <div className="stack">
        {items.length === 0 ? ( 
          //  N·∫øu gi·ªè h√†ng r·ªóng
          <div className="muted">Ch∆∞a c√≥ s·∫£n ph·∫©m.</div>
          //  Hi·ªÉn th·ªã ch·ªØ nh·∫°t "Ch∆∞a c√≥ s·∫£n ph·∫©m."
        ) : (
          //  N·∫øu c√≥ s·∫£n ph·∫©m
          items.map((item) => <CartItem key={item.id} item={item} />)
          //  Render t·ª´ng s·∫£n ph·∫©m b·∫±ng CartItem
        )}
      </div>

      {/* T·ªïng c·ªông */}
      <div className="totals">
        <div>T·ªïng ({totalQty} SP)</div>
        {/*  Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè */}

        <div>
          {formatVND(totalPrice)} <span className="currency">ƒë</span>
          {/*  Hi·ªÉn th·ªã t·ªïng gi√° tr·ªã gi·ªè h√†ng, format theo VND */}
        </div>
      </div>

      {/* H√†nh ƒë·ªông */}
      <div className="stack">
        <button
          className="btn btn-primary"
          disabled={items.length === 0}
          //  N·∫øu gi·ªè r·ªóng th√¨ disable n√∫t
          onClick={() => alert("Ch·ª©c nƒÉng thanh to√°n ƒëang ph√°t tri·ªÉn üòÖ")}
          //  T·∫°m th·ªùi ch·ªâ alert, ch∆∞a c√≥ logic thanh to√°n
        >
          Thanh to√°n
        </button>

        <button
          className="btn btn-danger"
          disabled={items.length === 0}
          // N·∫øu gi·ªè r·ªóng th√¨ disable n√∫t
          onClick={() => dispatch(clearCart())}
          // khi b·∫•m th√¨ dispatch action clearCart ƒë·ªÉ x√≥a gi·ªè
        >
          X√≥a gi·ªè
        </button>
      </div>
    </aside>
  );
}

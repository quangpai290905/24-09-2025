// src/redux/cart/cartSlice.jsx

// Import h√†m createSlice t·ª´ Redux Toolkit
// üëâ createSlice gi√∫p ƒë·ªãnh nghƒ©a state + reducer + action nhanh g·ªçn, kh√¥ng c·∫ßn vi·∫øt switch-case d√†i d√≤ng
import { createSlice } from "@reduxjs/toolkit" 

// ------------------- STATE KH·ªûI T·∫†O -------------------
// ƒê√¢y l√† tr·∫°ng th√°i m·∫∑c ƒë·ªãnh ban ƒë·∫ßu c·ªßa gi·ªè h√†ng
const initialState = {
  items: [],        // M·∫£ng s·∫£n ph·∫©m trong gi·ªè [{id, name, price, image, qty}]
  totalItems: 0,    // T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (c·ªông t·∫•t c·∫£ qty)
  totalPrice: 0,    // T·ªïng s·ªë ti·ªÅn (c·ªông price * qty)
}

// ------------------- H√ÄM TI·ªÜN √çCH -------------------
// T√¨m v·ªã tr√≠ s·∫£n ph·∫©m trong gi·ªè theo id, tr·∫£ v·ªÅ index ho·∫∑c -1 n·∫øu ch∆∞a c√≥
const findIndex = (state, id) => state.items.findIndex(i => i.id === id)

// ------------------- SLICE GI·ªé H√ÄNG -------------------
const cartSlice = createSlice({
  name: "cart",          // T√™n slice => state.cart
  initialState,          // State m·∫∑c ƒë·ªãnh
  reducers: {
    // ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè (n·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi, n·∫øu c√≥ r·ªìi th√¨ +1)
    addToCart: (state, action) => {
      const { id, name, price, image } = action.payload
      const idx = findIndex(state, id)
      if (idx === -1) {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ -> th√™m m·ªõi v·ªõi qty = 1
        state.items.push({ id, name, price, image, qty: 1 })
      } else {
        // N·∫øu ƒë√£ c√≥ -> tƒÉng s·ªë l∆∞·ª£ng th√™m 1
        state.items[idx].qty += 1
      }
      // C·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn
      state.totalItems += 1
      state.totalPrice += price
    },

    // ‚úÖ Alias cho addToCart (gi·ªØ l·∫°i n·∫øu code c≈© d√πng addItem)
    addItem: (state, action) => {
      const { id, name, price, image } = action.payload
      const idx = findIndex(state, id)
      if (idx === -1) {
        state.items.push({ id, name, price, image, qty: 1 })
      } else {
        state.items[idx].qty += 1
      }
      state.totalItems += 1
      state.totalPrice += price
    },

    // ‚úÖ TƒÉng s·ªë l∆∞·ª£ng 1 s·∫£n ph·∫©m trong gi·ªè theo id
    increase: (state, action) => {
      const id = action.payload
      const idx = findIndex(state, id)
      if (idx !== -1) {
        state.items[idx].qty += 1
        state.totalItems += 1
        state.totalPrice += state.items[idx].price
      }
    },

    // ‚úÖ Gi·∫£m s·ªë l∆∞·ª£ng 1 s·∫£n ph·∫©m (ch·ªâ gi·∫£m n·∫øu qty > 1, kh√¥ng ƒë·ªÉ v·ªÅ 0 ·ªü ƒë√¢y)
    decrease: (state, action) => {
      const id = action.payload
      const idx = findIndex(state, id)
      if (idx !== -1 && state.items[idx].qty > 1) {
        state.items[idx].qty -= 1
        state.totalItems -= 1
        state.totalPrice -= state.items[idx].price
      }
    },

    // ‚úÖ ƒê·∫∑t l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo input c·ªßa user
    setQuantity: (state, action) => {
      const { id, qty } = action.payload
      const idx = findIndex(state, id)
      if (idx !== -1) {
        const current = state.items[idx]
        const diff = qty - current.qty // ch√™nh l·ªách s·ªë l∆∞·ª£ng
        current.qty = qty
        state.totalItems += diff
        state.totalPrice += diff * current.price
      }
    },

    // ‚úÖ X√≥a ho√†n to√†n 1 s·∫£n ph·∫©m kh·ªèi gi·ªè
    removeItem: (state, action) => {
      const id = action.payload
      const idx = findIndex(state, id)
      if (idx !== -1) {
        const removed = state.items[idx]
        // Tr·ª´ ƒëi s·ªë l∆∞·ª£ng v√† ti·ªÅn t∆∞∆°ng ·ª©ng
        state.totalItems -= removed.qty
        state.totalPrice -= removed.qty * removed.price
        // X√≥a kh·ªèi m·∫£ng items
        state.items.splice(idx, 1)
      }
    },

    // ‚úÖ X√≥a to√†n b·ªô gi·ªè h√†ng (reset v·ªÅ m·∫∑c ƒë·ªãnh)
    clearCart: (state) => {
      state.items = []
      state.totalItems = 0
      state.totalPrice = 0
    },
  },
})

// ------------------- EXPORT -------------------
// Xu·∫•t action ƒë·ªÉ g·ªçi trong component
export const {
  addToCart,
  addItem,
  increase,
  decrease,
  setQuantity,
  removeItem,
  clearCart,
} = cartSlice.actions

// Xu·∫•t reducer ƒë·ªÉ khai b√°o trong store
export default cartSlice.reducer
